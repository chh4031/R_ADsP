※ WAS - 웹 어플리케이션 서버
	WAS[Web server - container - DB]
※ Container - 짜야하는 코드
※ MSA - 트래픽을 나누고 서버를 분할 -> 안정성, 확장성 ex) 상품목록은 터져도 로그인은 가능한 예시와 같은것 -> 웹에 이식 -> 빠르게 변화하기에 최근 자주 사용 
※ WAS는 MSA의 하나의 모델
client -> [Webserver -> container -> DB, DB], 요청
client <- [Webserver <- container <- DB, DB], 응답
=> 요청과 응답은 따로 놀 수 없음. 반드시 한쌍

※ 실무에서는 라이브러리에 의존을 손해로 생각 -> 기초를 모름. 라이브러리 의존성이 높아지게 됨.
※ 자료구조가 중요.

※ http - 인터넷 통신에 사용되는 프로톨로서 응답과 요청이 반드시 존재.
※ Method(요청) - Get, Post , Put, Delete 에 맞게 사용한다.(4개는 실무에 많이 사용) => 매우 중요한 기초적인 것. (면접질문에도 잘 나옴) -> 데이터 요청에 사용.(CRUD)
※ Status Code(응답) - 200번대 : 문제없음(200, 204, 206), 300번대 : 캐싱(304), 400 : 요청에 문제있음(400, 403, 404, 408, 414), 500번대 : 서버의 문제(다른요청이나 누락된 부분)(500, 503) => ()는 실무에 많이 사용, 해당 코드들로 문제들을 판단하는 것이 가능하다. 오류 추적의 가능

※ REST API - http 주소 체계를 예쁘게 가져가자는 것, http를 좀더 고도화해서 설계[조대협 블로그의 설명 참고], 경량화 및 데이터의 통신만 확인
※ REST API 특성 -  유니폼 인터페이스: 일관성 있음, 무상태성 : 상태가 없다, 이 페이지의 상태를 서버가 알 필요가 없음, 생산성 좋고, 관리 편함, 캐싱: 미리 만들어 두고 주는것(딜레이가 없다, 단 전략적으로 되어야함. -> 무한정 사용시 속도의 저하) ex) 미국서버의 넷플릭스가 일본서버에 캐싱되어서 빠르게 로딩이 가능

※ REST API 리소스 - 리소스를 잘 지켜야함. /뒤에것이 각 리소스 , ex) http://myweb/users/terry
- HTTP Post http://myweb/users/terry
- HTTP PUT http://myweb/users/terry
- HTTP Get http://myweb/users/terry 
- HTTP DELET Ehttp://myweb/users/terry
=> 요즘 대부분의 것들이 웹으로 구동 -> 인터넷만 있으면 어디든 사용 가능

※ REST API 테스트 -  포스트맨

------------------------------------------------------------------------------------------------------------------------------------------------------

※ node js - javascript의 런타임(구동환경)이다. (JVM과의 비교)★★★★★ , 웹 서버 만드는 것 X
※ node js의 특징
	- simple
	- V8 : 빠르다
	- Non-blocking IO : 비동기 방식이다, 실행은 확실하나 실행에 대한 순서의 보장은 안됨. 그러나 빠름, 대규모에 적합. ex)페이팔, 넷플, 배민
	- Single Thread Model : 요청 하나에 끝까지 잡음, 단 자원의 한계가 있다. CPU 쓰레드 하나에 요청 한개 잡음.
	- Event-loop : 메모리에 효율적, 직접 가서 요청을 받는 방식
	- Embedded WAS : WAS의 내장
	- Socket.io : 
	- JSON : 데이터 통신이 JSON으로 통일되고 있음, 자바 스크립트의 객체 표현 방식, 자바스크립트의 내장(표준)

※ Framework - 견고한 구조를 만들기 위해 - 안쓰면 터질 수 있다.
	- Express
	- Meteor
	- Koa
	- Sails
	- Loopback
	- nest

※ ORM - 실무에서 많이씀, 데이터 베이스 연결의 매니저 역할, 관리가 쉬워짐.

------------------------------------------------------------------------------------------------------------------------------------------------------

※ npm - node js의 패키지 관리 매니저
	- node -v, npm -v로 node js 확인

※ express generator 설치
	- npm install express-generator -g

※ 기본 구조의 생성
	express --view=ejs myapp(이름아무거나)

※ package.json에 모든 정보의 저장
	1. dependencies를 가장 우선적으로 봄
	2. scripts를 두번째로 봄 => 스크립트를 잘 활용해야함.

※ npm install로 구동환경을 완성시킴

※ 구동법
	- npm run start
		- F5로 304 코드의 확인 
		- Ctrl + shift + R로 200코드 확인

※nodemon의 설치
	- npm install -g nodemon
	- start의 node를 nodemon으로 변경 후 실행 -> 코드가 바뀌어도 바로 수정사항이 반영 

※ var와 let의 차이
	- 변수의 호이스팅의 차이를 보인다. 선언을 끌어올리다.
	- 자바 스크립트의 스코프 단위가 함수, 다른언어는 블록단위
	- 변수가 끼치는 범위는 알아야함. 
	- 호이스팅과 스코프의 개념을 알아야한다.

------------------------------------------------------------------------------------------------------------------------------------------------------

※ 견고한 프로젝트의 제작이 특강의 핵심

https://github.com/Seongh78?tab=repositories
